API Gateway in the Hub has the following endpoints:

NOTES:
1) 'Hub' refers to a local web server running on a small single board computer. Every hub has
a unique hub_id.
2) The base URL is a local IP address like http://192.168.1.10/. This is the web server hosted by the Hub.
3) 'Device' refers to the IoT devices containing relays & sensors.
4) 'Mobile/ Mobile App' refers to the web app accessed through the mobile handset. Every mobile app has a uniqe app_id
5)  user_id refers to the registered user. It is usually an email address verified with the Intof cloud service.
6)  Initially, the mobile app registers itself with the hub. The hub returns a security token. This toekn has to be furnished during every subsequent API call to the hub.
--------------------------------------------------------------------------------

WORKFLOWS

1) Register the user and the mobile app with the Hub for the first time:

end point: http://192.168.1.10/register/mobile
method: POST

example input JSON :
{
   "user_id" : "richard@intof.in",
   "app_id" : "A8B4CD78C09-89ASF0",
   "version" : "1.2"
}
The hub will automaticlly add hub_id to this.

Return value will be a JSON object. example:
{
   "code" : 200,
   "registration" : "success",
   "token" : "l5SdgAJSD9Q08LPO09NQRNN23098-LKJEW0923R-U23RM032LK23RADSF8923",
   "expiry" : "2020-09-15 10:20:45"
}
The token will be a unique combination of the user id, hub id and the app id.

On HTTP failure, the return value will be like:
{
   "code" : 401,
   "error" : "unauthorized access"
}

On registration failuare:
{
   "code" : 200,
   "registration" : "failure",
   "error" : "invalid mail address"
}
NOTE: If the user_id is not an email, you can add an email field to the input json. The hub can be configured to send email alerts to it.
NOTE: You can optionally add a mobile phone number to the input json. The hub can send text message alerts to the it.
--------------------------------------------------------------------------------

NOTE: All the following calls will need the security token in the 'Authorization: bearer' header.

2) List all the newly discovered IoT device:

end point: http://192.168.1.10/discover/devices
method: GET
There is no input JSON for this call.
The return value will be an array of JSON objects.

Return value:
{
   "new_devices" : 
   [
    	{
            "device_id" : "MBNASDFH82634", 
            "hardware_type" : "Relays-4,TEMPERATURE,HUMIDITY",
            num_relays = 4,
            room_name = '(Room name)',
            room_type = '(Room type)'
            
        },
        {
            "device_id" : "90ASDBASDF94D", 
            "hardware_type" : "Relays-2,LIGHT"
            num_relays = 2,
            room_name = '(Room name)',
            room_type = '(Room type)'
            
    	},
        {
            "device_id" : "AB89ASDFKDF33", 
            "hardware_type" : "Relays-1.1",
            num_relays = 1,
            room_name = '(Room name)',
            room_type = '(Room type)'
            
    	},
        {
            "device_id" : "BCD8700X8D43B", 
            "hardware_type" : "Relays-0,GAS,SMOKE",
            num_relays = 0,
            room_name = '(Room name)',
            room_type = '(Room type)'
            
    	}
   ]
}

If there are no new devices found by the hub:
{
   "new_devices" : []
}

Error messages:
{
    "error" : "invalid security token"
}
--------------------------------------------------------------------------------
3) Get all the device types:
end point: http://192.168.1.10/get/device/types
method: GET

Return json:
{
    'device_types': 
    ['Light', 'Fan', 'A/C', 'Heater', 'Fire alarm', 'Others']
}
NOTE: Device type determines the icon used to represent the relay or sensor on the UI.
You can click modify the drop down list and insert/delete strings.

After modifying the list, send the entire list to the server. 
The back end just deletes all the existing list and replaces with the new strings.

3)  Upload the new list of device types:
end point: http://192.168.1.10/set/device/types
method: POST

input json:
{
    'device_types': 
    ['Smoke detector',  'Pump' ,'Fan', 'A/C', 'Light', 'Fire alarm', 'Others']
}

Return json:
{ 'result' : 'success'} 
OR
{ 'error' : 'Only admin can modify the device list' }
--------------------------------------------------------------------------------

4) Get all the room types :
end point: http://192.168.1.10/get/room/types
method: GET

Return json:
{
    'room_types': 
    ['Bed room', 'Living room', 'Hall', 'Bath room', 'Portico', 'Garden', 'Others']
}
NOTE: Room type determines the icon used to represent the room on the UI. 

If yuu want to modify the list, send the entire new list to the server:

3)  Upload the new list of room types:

end point: http://192.168.1.10/set/room/types
method: POST

input json:
{
    'room_types': 
    ['Drawing room', 'Bed room', 'Hall', 'Bath room', 'Portico', 'Pooja room', 'Others']
}

Return json:
{ 'result' : 'success'} 
OR
{ 'error' : 'Only admin can modify the room list' }
--------------------------------------------------------------------------------
5) Select a device, and configure it:

end point: http://192.168.1.10/configure/device
method: POST

input json:
{
   "device_id" : "MBNASDFH82634",
   "room_type" : "Bed room",
   "room_name" : "Grandma's room"
   "device_config" : 
   [
    	 {
    	   "name" : "Bed room light", 
    	   "type" : "Light",
    	   "schedule" : [18,30,22,0]
    	 },
    	 {
    	   "name" : "Bed room AC", 
    	   "type" : "AC",
    	   "schedule" : [11,0,17,0]
    	 },        
    	 {
    	   "name" : "Bed room fan", 
    	   "type" : "Fan",
    	   "schedule" : [18,30,6,30]
    	 },        
    	 {
    	   "name" : "Bath room light", 
    	   "type" : "Light",
    	   "schedule" : []
    	 }        
    ]
}
NOTE: The last light will not be automatically switched on/off, since the schedule is empty.

Return value:
{
   "configuration" : "success"
}

Error message:
{
    "error" : "invalid device id"
}
--------------------------------------------------------------------------------

6) Get the current configuration of a device:

end point: http://192.168.1.10/get/device/config?device_id=MBNASDFH82634
method: GET

return value:
{
   "device_id" : "MBNASDFH82634",
   "device_type: "REL4.1",
   "num_relays" : 4,   
   "room_type" : "Bed room",
   "room_name" : "Grandma's bed room",
   "device_config" : 
    [
	     {"name" : "Bed room A/C",     "type": "A/C",    "schedule" : [18,0,6,30]},
         {"name" : "Bath room light",  "type": "Light",  "schedule" : [18,30,4,0]},
         {"name" : "Bed room fan",     "type": "Fan",    "schedule" : [18,15,6,30]},
         {"name" : "Balcony light",    "type": "Light",  "schedule" : []}
    ]
}

If it is a fresh device that has not yet been configured:
{
   "device_id" : "MBNASDFH82634",
   "hardware_type: "REL4.1",
   "num_relays" : 4,
   "room_type" : "",
   "room_name" : "",   
   "device_config" : []
}

Error message:
{
    "error" : "invalid device id"
}
--------------------------------------------------------------------------------

7) Get the current status of relays in a device:

end point: http://192.168.1.10/get/status?id=MBNASDFH82634
method: GET

return value:
{
   "device_id" : "MBNASDFH82634",
   "time_Stamp" : "2020-08-12 10:20:45",
   "status" : [1,1,0,0]
}
This means the first two relays are ON; the third & fourth relays are OFF.

If the device is offline:
{
   "error" : "device offline"
}

Error message:
{
    "error" : "invalid device id"
}
--------------------------------------------------------------------------------

8) Manually operate the relays in a device:

end point: http://192.168.1.10/set/status
method : POST

input json:
{
   "device_id" : "MBNASDFH82634",
   "status" : [1,0,2,1]
}
This means:
  Switch ON  relay1
  Switch OFF relay2
  Leave relay3 unchanged (code 2 = no change)
  Switch ON relay 4

return value will be the new status:
{
   "device_id" : "MBNASDFH82634",
   "time_stamp" : "2020-08-13 10:30:55"
   "status" : [1,0,1,1]
}
The third relay was ON earlier, so it continues in that state.

If the device is not responding:
{
   "device_id" : "MBNASDFH82634",
   "time_stamp" : "2020-08-13 10:30:55"
   "status" : [2,2,2,2]
}
--------------------------------------------------------------------------------
9) For testing:

end point: http://192.168.1.10/echo
method : POST

input json: any valid json object
return value: the input json is returned without modification

This will help to verify that we are passing the correct json data to the server.


